/*
    MIXINS
*/

// @debug transparentize($color, $amount);

// Add transparency (like LESS function)
// color: fade($color, [percent or 1..100])
@function fade($color, $amount) {
	$amount: 1 - ($amount / 100);
	@return transparentize($color, $amount);
}

// Function for converting PX to REM
@function px-to-rem($size) {
  $remSize: $size / 16px;
  @return #{$remSize}rem;
}
@function rem-to-px($size) {
	@return strip-units($size) * 16px;
}

// Mixin that will include the fall back px declaration as well as the calculated rem value.
@mixin fontSize($size) {
	font-size: $size;
	font-size: calculateRem($size);
}

// Remove painful em/rem/px/etc unit for SCSS math
@function strip-units($number) {
  @return $number / ($number * 0 + 1);
}




///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
  $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);
  
  @if not index(map-keys($units), $unit) {
    $_: log('Invalid unit `#{$unit}`.');
  }
  
  @return $value * map-get($units, $unit);
}


/*------------------------
https://codepen.io/davidhalford/pen/wlDxL

mixin that calculates if text needs to be light or dark
depending on the background color passed.

Color brightness is determined by the following formula: 
((Red value X 299) + (Green value X 587) + (Blue value X 114)) / 1000
------------------------*/
@mixin text-contrast($n) {
  $color-brightness: round((red($n) * 299) + (green($n) * 587) + (blue($n) * 114) / 1000);
  $light-color: round((red(#ffffff) * 299) + (green(#ffffff) * 587) + (blue(#ffffff) * 114) / 1000);
  
  @if abs($color-brightness) < ($light-color/2){
    // color: white !important;
    color: white;
  }

  @else {
  }
}


